import React, { useState, useEffect, useCallback } from 'react';
import { BookOpen, Lightbulb, Users, Award, Play, Pause, RotateCcw, ChevronRight, Star, Trophy, Brain, Palette, Brush, Music, Camera, Scissors, Mic } from 'lucide-react';
import { 
  findLessonCached, 
  loadAllTopics, 
  getQuizData, 
  getProjectData, 
  getLearningResources,
  getLearningModes,
  validateLessonData 
} from '../../../utils/lessonUtils';
import styles from './ArtsDash.module.css';

const ArtsDash = () => {
  const [selectedTopic, setSelectedTopic] = useState('overview');
  const [gradeLevel, setGradeLevel] = useState(6);
  const [learningMode, setLearningMode] = useState('interactive');
  const [userProgress, setUserProgress] = useState({});
  const [currentQuiz, setCurrentQuiz] = useState(null);
  const [quizScore, setQuizScore] = useState(0);
  const [projectRunning, setProjectRunning] = useState(false);
  const [chatHistory, setChatHistory] = useState([]);
  const [userInput, setUserInput] = useState('');
  const [achievements, setAchievements] = useState([]);
  const [studyStreak, setStudyStreak] = useState(0);
  
  // Dynamic data from JSON files
  const [topics, setTopics] = useState([]);
  const [currentTopicData, setCurrentTopicData] = useState(null);
  const [quizData, setQuizData] = useState([]);
  const [projectData, setProjectData] = useState(null);
  const [learningResources, setLearningResources] = useState([]);
  const [learningModes, setLearningModes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const subject = 'arts'; // This could be passed as a prop for reusability

  // Icon mapping for topics loaded from JSON
  const iconMap = {
    'overview': BookOpen,
    'visual': Palette,
    'music': Music,
    'theater': Mic,
    'dance': Users,
    'media': Camera
  };

  // Load all topics on component mount
  useEffect(() => {
    const initializeTopics = async () => {
      try {
        setLoading(true);
        const loadedTopics = await loadAllTopics(subject);
        
        // Add icons to topics
        const topicsWithIcons = loadedTopics.map(topic => ({
          ...topic,
          icon: iconMap[topic.id] || BookOpen
        }));
        
        setTopics(topicsWithIcons);
        setLearningModes(getLearningModes());
        
        // Initialize user progress
        const initialProgress = {};
        topicsWithIcons.forEach(topic => {
          initialProgress[topic.id] = Math.floor(Math.random() * 100);
        });
        setUserProgress(initialProgress);
        setStudyStreak(Math.floor(Math.random() * 15) + 1);
        
      } catch (err) {
        console.error('Failed to load topics:', err);
        setError('Failed to load lesson content. Please try again.');
      } finally {
        setLoading(false);
      }
    };

    initializeTopics();
  }, [subject]);

  // Load specific topic data when selected topic changes
  useEffect(() => {
    const loadTopicData = async () => {
      if (!selectedTopic) return;
      
      try {
        // Load topic details
        const topicData = await findLessonCached(subject, selectedTopic);
        if (topicData && validateLessonData(topicData)) {
          setCurrentTopicData(topicData);
        }

        // Load quiz data
        const quiz = await getQuizData(subject, selectedTopic);
        setQuizData(quiz);

        // Load project data
        const project = await getProjectData(subject, selectedTopic);
        setProjectData(project);

        // Load learning resources
        const resources = await getLearningResources(subject, selectedTopic);
        setLearningResources(resources);

      } catch (err) {
        console.error(`Failed to load data for topic ${selectedTopic}:`, err);
      }
    };

    loadTopicData();
  }, [selectedTopic, subject]);

  const startQuiz = useCallback((topicId) => {
    if (quizData && quizData.length > 0) {
      setCurrentQuiz({
        topic: topicId,
        questions: quizData,
        currentQuestion: 0,
        userAnswers: []
      });
      setQuizScore(0);
    }
  }, [quizData]);

  const answerQuestion = useCallback((answerIndex) => {
    if (!currentQuiz) return;
    
    const newAnswers = [...currentQuiz.userAnswers, answerIndex];
    const isCorrect = answerIndex === currentQuiz.questions[currentQuiz.currentQuestion].correct;
    
    if (isCorrect) {
      setQuizScore(prev => prev + 1);
    }

    if (currentQuiz.currentQuestion + 1 < currentQuiz.questions.length) {
      setCurrentQuiz(prev => ({
        ...prev,
        currentQuestion: prev.currentQuestion + 1,
        userAnswers: newAnswers
      }));
    } else {
      // Quiz completed
      const finalScore = quizScore + (isCorrect ? 1 : 0);
      const percentage = Math.round((finalScore / currentQuiz.questions.length) * 100);
      
      // Update progress
      setUserProgress(prev => ({
        ...prev,
        [currentQuiz.topic]: Math.min(100, prev[currentQuiz.topic] + 10)
      }));

      // Check for achievements
      if (percentage >= 80 && !achievements.includes('arts_scholar')) {
        setAchievements(prev => [...prev, 'arts_scholar']);
      }

      setCurrentQuiz(prev => ({
        ...prev,
        completed: true,
        finalScore: finalScore,
        percentage: percentage,
        userAnswers: newAnswers
      }));
    }
  }, [currentQuiz, quizScore, achievements]);

  const runProject = useCallback((topicId) => {
    setProjectRunning(true);
    setTimeout(() => {
      setProjectRunning(false);
      setUserProgress(prev => ({
        ...prev,
        [topicId]: Math.min(100, prev[topicId] + 5)
      }));
    }, 3000);
  }, []);

  const sendMessage = useCallback(() => {
    if (!userInput.trim()) return;

    const newMessage = { role: 'user', content: userInput };
    setChatHistory(prev => [...prev, newMessage]);

    // Simulate AI response
    setTimeout(() => {
      const responses = [
        "That's a wonderful creative question! Let me share some artistic insights about that...",
        "Interesting artistic concept! Here's what art history and theory tell us...",
        "Excellent creative thinking! This relates to several important artistic principles...",
        "Great question! Let's explore this artistic technique step by step..."
      ];
      
      const response = {
        role: 'assistant',
        content: responses[Math.floor(Math.random() * responses.length)] + " " + userInput
      };
      
      setChatHistory(prev => [...prev, response]);
    }, 1000);

    setUserInput('');
  }, [userInput]);

  const renderProgressBar = (progress) => (
    <div className={styles.progressBar}>
      <div 
        className={styles.progressFill}
        style={{ width: `${progress}%` }}
      ></div>
    </div>
  );

  const renderMainProgressBar = (progress) => (
    <div className={styles.mainProgressBar}>
      <div 
        className={styles.mainProgressFill}
        style={{ width: `${progress}%` }}
      ></div>
    </div>
  );

  const renderQuiz = () => {
    if (!currentQuiz) return null;

    if (currentQuiz.completed) {
      return (
        <div className={styles.quizCard}>
          <div className={styles.quizCompletion}>
            <Trophy className={styles.completionIcon} />
            <h3 className={styles.completionTitle}>Portfolio Review Complete!</h3>
            <p className={styles.completionScore}>
              Score: {currentQuiz.finalScore}/{currentQuiz.questions.length} ({currentQuiz.percentage}%)
            </p>
            <div className={styles.completionActions}>
              <button 
                onClick={() => setCurrentQuiz(null)}
                className={`${styles.completionButton} ${styles.completionButtonPrimary}`}
              >
                Continue Creating
              </button>
              <button 
                onClick={() => startQuiz(currentQuiz.topic)}
                className={`${styles.completionButton} ${styles.completionButtonSecondary}`}
              >
                Retake Review
              </button>
            </div>
          </div>
        </div>
      );
    }

    const question = currentQuiz.questions[currentQuiz.currentQuestion];
    
    return (
      <div className={styles.quizCard}>
        <div className={styles.quizHeader}>
          <div className={styles.quizTitleRow}>
            <h3 className={styles.quizTitle}>Portfolio Review: {topics.find(t => t.id === currentQuiz.topic)?.name}</h3>
            <span className={styles.quizCounter}>
              {currentQuiz.currentQuestion + 1} / {currentQuiz.questions.length}
            </span>
          </div>
          <div className={styles.quizProgressBar}>
            <div 
              className={styles.quizProgressFill}
              style={{ width: `${((currentQuiz.currentQuestion + 1) / currentQuiz.questions.length) * 100}%` }}
            ></div>
          </div>
        </div>
        
        <h4 className={styles.quizQuestion}>{question.question}</h4>
        
        <div className={styles.quizOptions}>
          {question.options.map((option, index) => (
            <button
              key={index}
              onClick={() => answerQuestion(index)}
              className={styles.quizOption}
            >
              {String.fromCharCode(65 + index)}. {option}
            </button>
          ))}
        </div>
      </div>
    );
  };

  const renderProject = (topicId) => {
    if (!projectData) return null;

    return (
      <div className={styles.projectCard}>
        <div className={styles.projectHeader}>
          <h3 className={styles.projectTitle}>{projectData.name}</h3>
          <Brush className={styles.projectIcon} />
        </div>
        <p className={styles.projectDescription}>{projectData.description}</p>
        
        <div className={styles.projectWindow}>
          {projectRunning ? (
            <div className={styles.projectLoader}>
              <div className={styles.projectSpinner}></div>
              <p>Creating project...</p>
            </div>
          ) : (
            <p className={styles.projectPlaceholder}>
              {projectData.placeholder || "Click 'Start Project' to begin creating"}
            </p>
          )}
        </div>
        
        <div className={styles.projectControls}>
          <button
            onClick={() => runProject(topicId)}
            disabled={projectRunning}
            className={`${styles.projectButton} ${styles.projectButtonPrimary}`}
          >
            <Play className={styles.buttonIcon} />
            {projectRunning ? 'Creating...' : 'Start Project'}
          </button>
          <button className={`${styles.projectButton} ${styles.projectButtonSecondary}`}>
            <RotateCcw className={styles.buttonIcon} />
            Reset
          </button>
        </div>
      </div>
    );
  };

  const renderChatWindow = () => (
    <div className={styles.chatWindow}>
      <div className={styles.chatHeader}>
        <h3 className={styles.chatHeaderContent}>
          <Brain className={styles.chatHeaderIcon} />
          AI Arts Mentor
        </h3>
      </div>
      
      <div className={styles.chatMessages}>
        {chatHistory.length === 0 && (
          <div className={styles.chatMessagesEmpty}>
            Ask me anything about art, creativity, or artistic techniques! I'm here to inspire your creativity.
          </div>
        )}
        {chatHistory.map((message, index) => (
          <div
            key={index}
            className={`${styles.chatMessageRow} ${message.role === 'user' ? styles.user : styles.assistant}`}
          >
            <div className={`${styles.chatMessage} ${styles[message.role]}`}>
              {message.content}
            </div>
          </div>
        ))}
      </div>
      
      <div className={styles.chatInput}>
        <div className={styles.chatInputRow}>
          <input
            type="text"
            value={userInput}
            onChange={(e) => setUserInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
            placeholder="Ask about art techniques, history, or inspiration..."
            className={styles.chatInputField}
          />
          <button
            onClick={sendMessage}
            className={styles.chatSendButton}
          >
            Send
          </button>
        </div>
      </div>
    </div>
  );

  const renderVisualResources = () => (
    <div className={styles.visualResourcesCard}>
      <h3 className={styles.visualResourcesTitle}>Visual Inspiration Gallery</h3>
      <div className={styles.visualResourcesGrid}>
        {learningResources.length > 0 ? (
          learningResources.map((resource, index) => (
            <div key={index} className={`${styles.visualResourceCard} ${styles[resource.color || 'green']}`}>
              <h4 className={styles.resourceTitle}>{resource.title}</h4>
              <p className={styles.resourceDescription}>{resource.description}</p>
            </div>
          ))
        ) : (
          // Default resources if none loaded from JSON
          <>
            <div className={`${styles.visualResourceCard} ${styles.green}`}>
              <h4 className={styles.resourceTitle}>Master Artworks</h4>
              <p className={styles.resourceDescription}>Study famous paintings and sculptures</p>
            </div>
            <div className={`${styles.visualResourceCard} ${styles.purple}`}>
              <h4 className={styles.resourceTitle}>Technique Demos</h4>
              <p className={styles.resourceDescription}>Watch artists demonstrate techniques</p>
            </div>
            <div className={`${styles.visualResourceCard} ${styles.yellow}`}>
              <h4 className={styles.resourceTitle}>Virtual Museum Tours</h4>
              <p className={styles.resourceDescription}>Explore world-renowned art collections</p>
            </div>
            <div className={`${styles.visualResourceCard} ${styles.red}`}>
              <h4 className={styles.resourceTitle}>Artist Spotlights</h4>
              <p className={styles.resourceDescription}>Learn about influential artists and movements</p>
            </div>
          </>
        )}
      </div>
    </div>
  );

  const renderContent = () => {
    if (loading) {
      return (
        <div className={styles.contentSection}>
          <div className={styles.loadingMessage}>Loading lesson content...</div>
        </div>
      );
    }

    if (error) {
      return (
        <div className={styles.contentSection}>
          <div className={styles.errorMessage}>{error}</div>
        </div>
      );
    }

    const topic = topics.find(t => t.id === selectedTopic);
    const topicData = currentTopicData || topic;
    
    if (!topicData) {
      return (
        <div className={styles.contentSection}>
          <div className={styles.errorMessage}>Topic not found</div>
        </div>
      );
    }

    return (
      <div className={styles.contentSection}>
        <div className={styles.topicHeaderCard}>
          <div className={styles.topicHeader}>
            <topicData.icon className={styles.topicHeaderIcon} />
            <div className={styles.topicHeaderContent}>
              <h2>{topicData.name}</h2>
              <p>{topicData.description}</p>
            </div>
          </div>
          
          <div className={styles.topicProgressSection}>
            <div className={styles.progressHeader}>
              <span className={styles.progressLabel}>Progress</span>
              <span className={styles.progressPercentage}>{userProgress[selectedTopic] || 0}%</span>
            </div>
            {renderMainProgressBar(userProgress[selectedTopic] || 0)}
          </div>

          <div className={styles.conceptsGrid}>
            {topicData.concepts?.map((concept, index) => (
              <div key={index} className={styles.conceptCard}>
                <div className={styles.conceptText}>{concept}</div>
              </div>
            ))}
          </div>
        </div>

        {learningMode === 'interactive' && renderProject(selectedTopic)}
        
        {learningMode === 'assessment' && (
          <div>
            {currentQuiz ? renderQuiz() : (
              <div className={styles.quizStartCard}>
                <Award className={styles.quizStartIcon} />
                <h3 className={styles.quizStartTitle}>Ready for Portfolio Review?</h3>
                <p className={styles.quizStartDescription}>Test your knowledge of {topicData.name}</p>
                <button
                  onClick={() => startQuiz(selectedTopic)}
                  className={styles.quizStartButton}
                  disabled={!quizData || quizData.length === 0}
                >
                  {quizData && quizData.length > 0 ? 'Start Review' : 'Review Coming Soon'}
                </button>
              </div>
            )}
          </div>
        )}

        {learningMode === 'collaborative' && renderChatWindow()}
        {learningMode === 'visual' && renderVisualResources()}
      </div>
    );
  };

  if (loading) {
    return <div className={styles.loadingContainer}>Loading Arts Dashboard...</div>;
  }

  return (
    <div className={styles.artsPageContainer}>
      {/* Sidebar */}
      <div className={styles.sidebar}>
        <div className={styles.sidebarHeader}>
          <h1 className={styles.sidebarTitle}>Arts Learning Studio</h1>
          <div className={styles.studyStreak}>
            <Star className={styles.streakIcon} />
            {studyStreak} day streak
          </div>
        </div>

        {/* Grade Level Selector */}
        <div className={styles.gradeLevelSection}>
          <label className={styles.sectionLabel}>Grade Level</label>
          <select
            value={gradeLevel}
            onChange={(e) => setGradeLevel(Number(e.target.value))}
            className={styles.gradeSelect}
          >
            {[6, 7, 8, 9, 10, 11, 12].map(grade => (
              <option key={grade} value={grade}>Grade {grade}</option>
            ))}
          </select>
        </div>

        {/* Learning Mode Selector */}
        <div className={styles.learningModeSection}>
          <label className={styles.sectionLabel}>Learning Mode</label>
          <div className={styles.learningModeList}>
            {learningModes.map(mode => (
              <button
                key={mode.id}
                onClick={() => setLearningMode(mode.id)}
                className={`${styles.learningModeButton} ${learningMode === mode.id ? styles.active : ''}`}
              >
                <div className={styles.modeContent}>
                  <div className={styles.modeDetails}>
                    <div className={styles.modeName}>{mode.name}</div>
                    <div className={styles.modeDescription}>{mode.description}</div>
                  </div>
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Topics */}
        <div className={styles.topicsSection}>
          <h2 className={styles.topicsTitle}>Art Disciplines</h2>
          <div className={styles.topicsList}>
            {topics.map(topic => (
              <button
                key={topic.id}
                onClick={() => setSelectedTopic(topic.id)}
                className={`${styles.topicButton} ${selectedTopic === topic.id ? styles.active : ''}`}
              >
                <div className={styles.topicContent}>
                  <div className={styles.topicInfo}>
                    <topic.icon className={styles.topicIcon} />
                    <span className={styles.topicName}>{topic.name}</span>
                  </div>
                  <div className={styles.topicProgress}>
                    <span className={styles.progressText}>{userProgress[topic.id] || 0}%</span>
                    <ChevronRight className={styles.chevronIcon} />
                  </div>
                </div>
                <div>
                  {renderProgressBar(userProgress[topic.id] || 0)}
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Achievements */}
        {achievements.length > 0 && (
          <div className={styles.achievementsSection}>
            <h3 className={styles.achievementsTitle}>Achievements</h3>
            <div className={styles.achievementsList}>
              {achievements.map((achievement, index) => (
                <div key={index} className={styles.achievementBadge}>
                  <Trophy className={styles.achievementIcon} />
                  Arts Scholar
                </div>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Main Content */}
      <div className={styles.mainContent}>
        {renderContent()}
      </div>
    </div>
  );
};

export default ArtsDash;