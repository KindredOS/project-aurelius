// api/Science.js
// This file contains all science-specific API helper functions for use with ApiMaster

import { getApiUrl } from './ApiMaster.js';

const getBase = () => `${getApiUrl()}/edu/science`;

// Helper function to clean markdown content
function cleanMarkdownContent(content) {
  if (typeof content !== 'string') return content;
  
  // Handle escaped newlines
  let cleaned = content.replace(/\\n/g, '\n');
  
  // Clean up excessive newlines (more than 2 consecutive)
  cleaned = cleaned.replace(/\n{3,}/g, '\n\n');
  
  // Handle any remaining escaped characters
  cleaned = cleaned
    .replace(/\\t/g, '\t')
    .replace(/\\r/g, '\r')
    .replace(/\\"/g, '"')
    .replace(/\\'/g, "'")
    .replace(/\\\\/g, '\\');
    
  return cleaned;
}

export async function submitQuizResult({ topicId, score, total, percentage }) {
  try {
    const response = await fetch(`${getBase()}/quiz/submit`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ topicId, score, total, percentage })
    });
    return await response.json();
  } catch (err) {
    console.error('[ScienceAPI] submitQuizResult error:', err);
    return null;
  }
}

export async function fetchScienceTopics() {
  try {
    const response = await fetch(`${getBase()}/topics`);
    return await response.json();
  } catch (err) {
    console.error('[ScienceAPI] fetchScienceTopics error:', err);
    return [];
  }
}

export async function logStudyStreak(userId, streakCount) {
  try {
    const response = await fetch(`${getBase()}/streak`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId, streakCount })
    });
    return await response.json();
  } catch (err) {
    console.error('[ScienceAPI] logStudyStreak error:', err);
    return null;
  }
}

export async function fetchStudentMarkdown(email, filepath) {
  try {
    const url = `${getBase()}/markdown?email=${encodeURIComponent(email)}&filepath=${encodeURIComponent(filepath)}`;
    const response = await fetch(url);
    if (!response.ok) throw new Error('Markdown fetch failed');
    
    const rawContent = await response.text();
    
    // Clean the markdown content before returning
    const cleanedContent = cleanMarkdownContent(rawContent);
    
    console.log('[ScienceAPI] Raw markdown:', rawContent.substring(0, 200));
    console.log('[ScienceAPI] Cleaned markdown:', cleanedContent.substring(0, 200));
    
    return cleanedContent;
  } catch (err) {
    console.error('[ScienceAPI] fetchStudentMarkdown error:', err);
    return 'Error loading content.';
  }
}

export async function saveStudentMarkdown(email, filepath, content) {
  try {
    // Clean content before saving
    const cleanedContent = cleanMarkdownContent(content);
    
    const response = await fetch(`${getBase()}/markdown/save`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, filepath, content: cleanedContent })
    });
    return await response.json();
  } catch (err) {
    console.error('[ScienceAPI] saveStudentMarkdown error:', err);
    return null;
  }
}

export async function queryModel(prompt, modelKey = 'hermes', max_new_tokens = 750) {
  try {
    const response = await fetch(`${getApiUrl()}/model/query`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        query: prompt,
        model_key: modelKey,
        max_new_tokens
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Model query failed: ${errorText}`);
    }

    const result = await response.json();
    return result.response || 'No response received.';
  } catch (err) {
    console.error('[ScienceAPI] queryModel error:', err);
    return 'Error during model query.';
  }
}

export async function saveChatThread({ email, threadId, subject, history }) {
  try {
    const response = await fetch(`${getBase()}/chats/save`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email,
        threadId,
        subject,
        history,
        timestamp: new Date().toISOString()
      })
    });
    return await response.json();
  } catch (err) {
    console.error('[ScienceAPI] saveChatThread error:', err);
    return null;
  }
}

export async function fetchChatThreads(email) {
  try {
    const response = await fetch(`${getBase()}/chats/list?email=${encodeURIComponent(email)}`);
    if (!response.ok) throw new Error('Failed to fetch chat threads');
    return await response.json();
  } catch (err) {
    console.error('[ScienceAPI] fetchChatThreads error:', err);
    return [];
  }
}

export async function fetchChatThread(email, threadId) {
  try {
    const response = await fetch(`${getBase()}/chats/${threadId}.json?email=${encodeURIComponent(email)}`);
    if (!response.ok) throw new Error('Failed to fetch chat thread');
    return await response.json();
  } catch (err) {
    console.error('[ScienceAPI] fetchChatThread error:', err);
    return null;
  }
}

export async function fetchUserScienceProgress(email) {
  try {
    const response = await fetch(`${getBase()}/user-index?email=${encodeURIComponent(email)}`);
    if (!response.ok) throw new Error('Failed to fetch user progress');
    return await response.json();
  } catch (err) {
    console.error('[ScienceAPI] fetchUserScienceProgress error:', err);
    return {};
  }
}